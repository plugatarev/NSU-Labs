На x86 доступно восемь 32-х битных регистров общего назначения — eax, ebx, ecx, edx, esp, ebp, esi и edi.

Дополнительные регистры получили названия r8, r9, …, r15. Соответствующие им регистры, которые представляют младшие 32, 16 и 8 бит, 
получили название r8d, r8w, r8b, и по аналогии для регистров r9-r15. Кроме того, появились регистры,
представляющие собой младшие 8 бит регистров rsi, rdi, rbp и rsp — sil, dil, bpl и spl соответственно.


в m32 другие регистры хранения, все параметры приходят через ячейки памяти(стек)
для вещественной арифметики используется сопроцессор и регистры сопроцессора(st)

xmm0 - регистр, который может хранить вещественное значение
В leal нет обращения в память
Другие инструкции для арифметических операций 
movs, movp - скаляр, вектор
Другие арифметические операции для регистров
Было добавлено 16 128-разрядных медиа-регистров под названиями XMM0, XMM1, XMM2, XMM3, XMM4, XMM5, XMM6, XMM7, XMM8, XMM9, XMM10, XMM11, XMM12, XMM13, XMM14, XMM15.

movq %rbx, %rax
movl %ebx, %eax

обращение в память - это регистр в () . В leal нет обращения в память

(a,b,c,d) = b * c + a + d
%rip save adress return
ret = pop %rip

O1:
Отображаются локальные переменные на регистры
Нет сохранения кадра стека(махинаций с rbp и rsp), указатель передается через rdi
В foo нет обращения по адресу
exhibitor: сначала сделает первую проверку цикла, а только потом заведет локальные переменные
работа на xmm_
movapd  %xmm0, %xmm4
divsd   %xmm1, %xmm4
mulsd   %xmm4, %xmm2
addsd   %xmm2, %xmm3
регистр %r12 хранит входные

O2:
Foo выкинули
регистр %r8 хранит входные
leaq 1(%r8), %rdx


O3:
leaq 1(%r8), %rdx

Os:
using incq, decb    
нет зачисток

Og:
не изменяется позиция выделения локальных данных на стеке и проверок
foo не удалится
вызов функций с параметром(тип указан)

Ofast:
Как O3


leaveq       mov %rbp,%rsp      pop %rbp


|__64__|__56__|__48__|__40__|__32__|__24__|__16__|__8___|
|__________________________RAX__________________________|
|xxxxxxxxxxxxxxxxxxxxxxxxxxx|____________EAX____________|
|xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx|_____AX______|
|xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx|__AH__|__AL__|