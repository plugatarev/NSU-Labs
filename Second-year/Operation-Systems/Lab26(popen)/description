О работе popen pclose
Сначала popen создает канал, затем порождает процесс, исполняющий команду, заданную
первым аргументом, и перенаправляет ее стандартный ввод или вывод в канал. Соответственно,
pclose закрывает канал и ждет завершения порожденного процесса.
Функция popen реализована с использованием pipe для создания канала, fork для
запуска подпроцесса и dup для перенаправления стандартного ввода или вывода в канал.
Функция pclose, в свою очередь, использует close, чтобы закрыть канал, и waitid или
waitpid для того, чтобы дождаться завершения порождённого процесса.

main.c
50 -> 9 Создается канал c помощью popen("./writer", "r") с поцессом исполняющим writer
Аргументы popen:
command - указатель на строку символов, содержащую любую правильную команду интерпретатора shell. 
Это работает потому, что popen исполняет shell и передает ему эту командную строку как
аргумент.
type - "r" для чтения и "w" для записи.
type должен быть "r", если программа хочет читать данные, выдаваемые command в
стандартный вывод.
type должен быть "w", если вывод в полученный указатель на файл должен быть
стандартным вводом command.
После успешного завершения popen() возвращает указатель на открытый поток, который можно использовать для чтения 
или записи в канал. В противном случае он возвращает нулевой указатель.
14 Читаем сообщение от порожденного процесса в message из канала
17 Закрываем канал
pclose - закрывает канал открытый popen
pclose принимает stream - указатель на FILE, полученный при вызове popen.
Отличие pclose от fclose состоит в том, что pclose ожидает завершения созданного процесса.

53 -> 27 Создается канал c помощью popen("./reader", "r") с поцессом исполняющим reader
34 Пишутся данные в канала из message
Функция fwrite() записывает из массива, на который указывает message, в поток, на который указывает reader.
fwrite() возвращает количество успешно записанных элементов, которое может быть меньше, чем message_length,
если возникает ошибка записи. 

write_process.c
14 Читаются данные в message со стандарного потока ввода
17 message записывается в стандартный поток(который будет перенаправлен в канал)

reader_process.c
13 Читаются данные из канала
18-19 Переводятся в заглавные
21 Печатаем преобразованный в терминал

