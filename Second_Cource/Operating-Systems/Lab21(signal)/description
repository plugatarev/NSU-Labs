Сигналы — это механизм передачи сообщений между процессами и от ядра к процессам, в основном
для обработки ошибок и исключительных ситуаций. Сигналы могут быть посланы ядром или
процессом процессу. Они могут быть обработаны получающим процессом.

Например, попытка записать значение по недопустимому виртуальному адресу или деление на ноль вынуждают ядро 
генерировать сигнал.

29 Устанавливаем реакцию на сигнал SIGINT(сигнал посылается когда нажимается клавиша Ctrl-C, чтобы завершить
исполняющуюся программу), т.е. действия, которые процесс предпринимает, когда получает заданный сигнал. 
Аргументы: sig задаёт номер сигнала, disp задаёт реакцию.
После успешного завершения sigset() возвращает SIG_HOLD, если сигнал был перехвачен, или предыдущую 
реакцию на сигнал, если он не был перехвачен. В противном случае он возвращает SIG_ERR и устанавливает errno,
чтобы указать на ошибку

34 Устанавливаем реакцию на сигнал сигнал SIGQUIT(сигнал посылается когда нажимается клавиша Ctrl-\).
   
40-42 pause задерживает исполнение процесса на неопределённое время до момента, пока не возникнет 
неигнорируемый сигнал. Возвращаемое значение успешного завершения отсутствует.
Функция pause() завершится ошибкой, если сигнал перехватывается вызывающим процессом, и управление возвращается 
из функции захвата сигнала.

При получении сигнала процесс вызывает заданную функцию. Значение sig передается этой функции как аргумент. 
Это называется перехватом (catching) сигнала.
В нашем случае перехватываем сигналы SIGINT и SIGQUIT, обрабатываем с помощью catchsignal()

catchsignal()
19-22 Если перехваченный сигнал - это SIGQUIT, то устанавливаем флаг завершения программы

23 Издается звуковой сигнал с помощью write
Функция write() должна попытаться записать n байтов из буфера, в файл, связанный с дескриптором открытого файла.
STDOUT_FILENO - дескриптор файла для стандартного вывода.

28 Увеличиваем счетчик перехваченных сигналов SIGINT


