Version1
9 - cоздается подпроцесс родителя
Системный вызов fork создаёт дочерний процесс исполняющего процесса.
Возвращаемое значение - это ноль в дочернем элементе и номер идентификатора процесса дочернего элемента в
родителе или -1 в случае ошибки.
Дочерний процесс наследует у родителя сегменты кода, данных и стека программы, файловые дескрипторы, реальный и эффективный номер 
пользователя и номер группы. Дочерний процесс не наследует: идентификатор процесса, идентификатор родительского процесса.
Когда родительский процесс создает дочерний процесс, оба этих процесса будут использовать одни и те же страницы памяти(одну и ту же
физическую память), но система устанавливает на страницы этих сегментов защиту от записи. Чтение таких страниц происходит без изменений, 
но при попытке записи, диспетчер памяти генерирует исключение защиты памяти.  Ядро перехватывает это исключение, 
создаёт копию страницы и отображает эту копию в адресное пространство того процесса, который пытался произвести запись, и измения уже проводятся
в собственной для процесса памяти. 
Такое поведение называется копированием при записи (copy-on-write).

14-15 Для подпроцесса вызывается execlp(первым аргументом принимает имя программы, которую нужно испольнить, далее
параметры командной строки, NULL - чтобы показать конец агрументов)
execlp подменяет наш машинный код на машинный код cat. Может искать имя программы в переменных среды PATH. 

19 - процесс родитель печатает "Hello, World!"

Version2
13 - Создается потомок у родителя
19 - Для подпроцесса вызывается execlp(дочерний процесс будет исполнять cat)

23 - wait ждет, когда завершится процесс потомок, а дальше возвращает управление
Если вызывается wait, а у процесса нет ни одного незавершенного подпроцесса, wait возвращает -1
Иначе вызывающий процесс:
Ждет, если существует незавершившийся подпроцесс.
Возвращает управление немедленно, если существует подпроцесс, который уже завершился, но к нему не применялся wait.
В обоих вышеперечисленных случаях, wait возвращает идентификатор завершившегося
подпроцесса.
Возвращает значение -1, если wait был прерван сигналом. 
28 - только после этого печатается "Hello, World!"
