Устройства ввода/вывода обычно работают гораздо медленнее центрального процессора, 
поэтому при выполнении операций с ними процессор обычно оказывается вынужден ждать их.  
Поэтому во всех ОС системные вызовы синхронного ввода/вывода представляют собой блокирующиеся операции.

Если ваша программа работает с несколькими устройствами ввода/вывода и/или сетевыми соединениями, 
ей невыгодно блокироваться на операции, связанной с одним из этих устройств, ведь в таком состоянии 
она может пропустить возможность совершить ввод/вывод с другого устройства без блокировки. 

Системный вызов select(3C) позволяет ожидать готовности нескольких устройств или сетевых соединений 
(в действительности, готовности объектов большинства типов, которые могут быть идентифицированы файловым 
дескриптором).  Когда один или несколько из дескрипторов оказываются готовы передать данные, select(3C) 
возвращает управление программе и передает списки готовых дескрипторов в выходных параметрах.

В том случае, если есть возможность заранее сообщить, будет ли вызов блокирующим,
существует и другая альтернатива. В большинстве версий UNIX существует системный
вызов select, позволяющий сообщить вызывающей программе, будет ли предполагае-
мый системный вызов read блокирующим. Если такой вызов имеется, библиотечная
процедура read может быть заменена новой процедурой, которая сначала осуществляет
вызов процедуры select и только потом — вызов read, если он безопасен (то есть не будет
выполнять блокировку). Если вызов read будет блокирующим, он не осуществляется.
Вместо этого запускается выполнение другого потока. В следующий раз, когда система
поддержки исполнения программ получает управление, она может опять проверить,
будет ли на этот раз вызов read безопасен. Для реализации такого подхода требуется
переписать некоторые части библиотеки системных вызовов, что нельзя рассматривать
в качестве эффективного и элегантного решения, но все же это тоже один из вариантов.
Код, который помещается вокруг системного вызова с целью проверки, называется кон-
вертом (jacket), или оболочкой, или оберткой (wrapper).

select, pselect, FD_CLR, FD_ISSET, FD_SET, FD_ZERO - многопоточный синхронный ввод-вывод  


Для манипуляций наборами существуют четыре макроса: FD_ZERO, очищающий набор; 
FD_SET и FD_CLR добавляют заданный описатель к набору или удаляют его из набора; 
FD_ISSET проверяет, является ли описатель частью набора; 
этот макрос полезен после возврата из функции select. 

 n на единицу больше самого большого номера описателей из всех наборов.

timeout - это верхняя граница времени, которое пройдет перед возвратом из select. 
Можно использовать нулевое значение, и при этом select завершится немедленно. 
Если timeout равен NULL (нет времени ожидания), то select будет ожидать изменений неопределенное время. 

struct timeval { 
    long    tv_sec;         /* seconds */
    long    tv_usec;        /* microseconds */
};